// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.15.8
// source: options.proto

package options

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Handler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Handler) Reset() {
	*x = Handler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_options_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Handler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Handler) ProtoMessage() {}

func (x *Handler) ProtoReflect() protoreflect.Message {
	mi := &file_options_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Handler.ProtoReflect.Descriptor instead.
func (*Handler) Descriptor() ([]byte, []int) {
	return file_options_proto_rawDescGZIP(), []int{0}
}

func (x *Handler) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var file_options_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         74400,
		Name:          "vv.options.journal",
		Tag:           "varint,74400,opt,name=journal",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         74401,
		Name:          "vv.options.metrics_alias",
		Tag:           "bytes,74401,opt,name=metrics_alias",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*Handler)(nil),
		Field:         74502,
		Name:          "vv.options.method_authorization",
		Tag:           "bytes,74502,opt,name=method_authorization",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*Handler)(nil),
		Field:         74503,
		Name:          "vv.options.method_proxy_authorization",
		Tag:           "bytes,74503,opt,name=method_proxy_authorization",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*Handler)(nil),
		Field:         74504,
		Name:          "vv.options.method_whitelisting",
		Tag:           "bytes,74504,opt,name=method_whitelisting",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*Handler)(nil),
		Field:         74505,
		Name:          "vv.options.authorization",
		Tag:           "bytes,74505,opt,name=authorization",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*Handler)(nil),
		Field:         74506,
		Name:          "vv.options.proxy_authorization",
		Tag:           "bytes,74506,opt,name=proxy_authorization",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*Handler)(nil),
		Field:         74507,
		Name:          "vv.options.whitelisting",
		Tag:           "bytes,74507,opt,name=whitelisting",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         74600,
		Name:          "vv.options.require",
		Tag:           "varint,74600,opt,name=require",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         74601,
		Name:          "vv.options.eq",
		Tag:           "bytes,74601,opt,name=eq",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         74602,
		Name:          "vv.options.ne",
		Tag:           "bytes,74602,opt,name=ne",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*uint32)(nil),
		Field:         74603,
		Name:          "vv.options.lt",
		Tag:           "varint,74603,opt,name=lt",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*uint32)(nil),
		Field:         74604,
		Name:          "vv.options.le",
		Tag:           "varint,74604,opt,name=le",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*uint32)(nil),
		Field:         74605,
		Name:          "vv.options.gt",
		Tag:           "varint,74605,opt,name=gt",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*uint32)(nil),
		Field:         74606,
		Name:          "vv.options.ge",
		Tag:           "varint,74606,opt,name=ge",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*uint32)(nil),
		Field:         74607,
		Name:          "vv.options.max_cap",
		Tag:           "varint,74607,opt,name=max_cap",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*uint32)(nil),
		Field:         74608,
		Name:          "vv.options.min_cap",
		Tag:           "varint,74608,opt,name=min_cap",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         74609,
		Name:          "vv.options.cst_datetime",
		Tag:           "varint,74609,opt,name=cst_datetime",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         74610,
		Name:          "vv.options.cst_minute",
		Tag:           "varint,74610,opt,name=cst_minute",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         74611,
		Name:          "vv.options.cn_mobile",
		Tag:           "varint,74611,opt,name=cn_mobile",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         74612,
		Name:          "vv.options.cst_day",
		Tag:           "varint,74612,opt,name=cst_day",
		Filename:      "options.proto",
	},
}

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional bool journal = 74400;
	E_Journal = &file_options_proto_extTypes[0]
	// optional string metrics_alias = 74401;
	E_MetricsAlias = &file_options_proto_extTypes[1]
	// optional vv.options.Handler method_authorization = 74502;
	E_MethodAuthorization = &file_options_proto_extTypes[2]
	// optional vv.options.Handler method_proxy_authorization = 74503;
	E_MethodProxyAuthorization = &file_options_proto_extTypes[3]
	// optional vv.options.Handler method_whitelisting = 74504;
	E_MethodWhitelisting = &file_options_proto_extTypes[4]
)

// Extension fields to descriptorpb.ServiceOptions.
var (
	// optional vv.options.Handler authorization = 74505;
	E_Authorization = &file_options_proto_extTypes[5]
	// optional vv.options.Handler proxy_authorization = 74506;
	E_ProxyAuthorization = &file_options_proto_extTypes[6]
	// optional vv.options.Handler whitelisting = 74507;
	E_Whitelisting = &file_options_proto_extTypes[7]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// for string: not empty; numeric: not zero; bytes: not nil; map: not nil
	//
	// optional bool require = 74600;
	E_Require = &file_options_proto_extTypes[8]
	// optional string eq = 74601;
	E_Eq = &file_options_proto_extTypes[9] // equal to
	// optional string ne = 74602;
	E_Ne = &file_options_proto_extTypes[10] // not equal to
	// optional uint32 lt = 74603;
	E_Lt = &file_options_proto_extTypes[11] // less then
	// optional uint32 le = 74604;
	E_Le = &file_options_proto_extTypes[12] // less than or equal to
	// optional uint32 gt = 74605;
	E_Gt = &file_options_proto_extTypes[13] // greater than
	// optional uint32 ge = 74606;
	E_Ge = &file_options_proto_extTypes[14] // greater than or equal to
	// optional uint32 max_cap = 74607;
	E_MaxCap = &file_options_proto_extTypes[15] // capacity by slice/map/bytes
	// optional uint32 min_cap = 74608;
	E_MinCap = &file_options_proto_extTypes[16] // capacity by slice/map/bytes
	// optional bool cst_datetime = 74609;
	E_CstDatetime = &file_options_proto_extTypes[17] // 2006-01-02 15:04:05
	// optional bool cst_minute = 74610;
	E_CstMinute = &file_options_proto_extTypes[18] // 2006-01-02 15:04
	// optional bool cn_mobile = 74611;
	E_CnMobile = &file_options_proto_extTypes[19] // 10000000000
	// optional bool cst_day = 74612;
	E_CstDay = &file_options_proto_extTypes[20] // 2006-01-02
)

var File_options_proto protoreflect.FileDescriptor

var file_options_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x76, 0x76, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x20, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1d, 0x0a,
	0x07, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x3d, 0x0a, 0x07,
	0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa0, 0xc5, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x3a, 0x48, 0x0a, 0x0d, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa1, 0xc5, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x88, 0x01, 0x01, 0x3a, 0x6b, 0x0a, 0x14, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x86, 0xc6,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x76, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x13, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x3a, 0x76, 0x0a, 0x1a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x87, 0xc6, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x76, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x18, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x3a, 0x69, 0x0a, 0x13, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x88, 0xc6, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x76, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x12,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x88, 0x01, 0x01, 0x3a, 0x5f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x89, 0xc6, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x76, 0x76, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x3a, 0x6a, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x8a,
	0xc6, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x76, 0x2e, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x12, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x3a, 0x5d, 0x0a, 0x0c, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x8b, 0xc6, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x76,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x52, 0x0c, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01,
	0x01, 0x3a, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x12, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe8, 0xc6, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x88, 0x01, 0x01, 0x3a,
	0x32, 0x0a, 0x02, 0x65, 0x71, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe9, 0xc6, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x71,
	0x88, 0x01, 0x01, 0x3a, 0x32, 0x0a, 0x02, 0x6e, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xea, 0xc6, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x32, 0x0a, 0x02, 0x6c, 0x74, 0x12, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xeb, 0xc6, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x3a, 0x32, 0x0a, 0x02, 0x6c,
	0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xec, 0xc6, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x3a,
	0x32, 0x0a, 0x02, 0x67, 0x74, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xed, 0xc6, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x67, 0x74,
	0x88, 0x01, 0x01, 0x3a, 0x32, 0x0a, 0x02, 0x67, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xee, 0xc6, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x67, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x3b, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x61, 0x70, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xef, 0xc6, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x43, 0x61,
	0x70, 0x88, 0x01, 0x01, 0x3a, 0x3b, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x12,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf0,
	0xc6, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x43, 0x61, 0x70, 0x88, 0x01,
	0x01, 0x3a, 0x45, 0x0a, 0x0c, 0x63, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xf1, 0xc6, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x41, 0x0a, 0x0a, 0x63, 0x73, 0x74, 0x5f,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf2, 0xc6, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63,
	0x73, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x3f, 0x0a, 0x09, 0x63,
	0x6e, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf3, 0xc6, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x63, 0x6e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x3b, 0x0a, 0x07,
	0x63, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf4, 0xc6, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x63, 0x73, 0x74, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01, 0x42, 0x24, 0x5a, 0x22, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x6b, 0x61, 0x6b, 0x69,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x76, 0x76, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_options_proto_rawDescOnce sync.Once
	file_options_proto_rawDescData = file_options_proto_rawDesc
)

func file_options_proto_rawDescGZIP() []byte {
	file_options_proto_rawDescOnce.Do(func() {
		file_options_proto_rawDescData = protoimpl.X.CompressGZIP(file_options_proto_rawDescData)
	})
	return file_options_proto_rawDescData
}

var file_options_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_options_proto_goTypes = []interface{}{
	(*Handler)(nil),                     // 0: vv.options.Handler
	(*descriptorpb.MethodOptions)(nil),  // 1: google.protobuf.MethodOptions
	(*descriptorpb.ServiceOptions)(nil), // 2: google.protobuf.ServiceOptions
	(*descriptorpb.FieldOptions)(nil),   // 3: google.protobuf.FieldOptions
}
var file_options_proto_depIdxs = []int32{
	1,  // 0: vv.options.journal:extendee -> google.protobuf.MethodOptions
	1,  // 1: vv.options.metrics_alias:extendee -> google.protobuf.MethodOptions
	1,  // 2: vv.options.method_authorization:extendee -> google.protobuf.MethodOptions
	1,  // 3: vv.options.method_proxy_authorization:extendee -> google.protobuf.MethodOptions
	1,  // 4: vv.options.method_whitelisting:extendee -> google.protobuf.MethodOptions
	2,  // 5: vv.options.authorization:extendee -> google.protobuf.ServiceOptions
	2,  // 6: vv.options.proxy_authorization:extendee -> google.protobuf.ServiceOptions
	2,  // 7: vv.options.whitelisting:extendee -> google.protobuf.ServiceOptions
	3,  // 8: vv.options.require:extendee -> google.protobuf.FieldOptions
	3,  // 9: vv.options.eq:extendee -> google.protobuf.FieldOptions
	3,  // 10: vv.options.ne:extendee -> google.protobuf.FieldOptions
	3,  // 11: vv.options.lt:extendee -> google.protobuf.FieldOptions
	3,  // 12: vv.options.le:extendee -> google.protobuf.FieldOptions
	3,  // 13: vv.options.gt:extendee -> google.protobuf.FieldOptions
	3,  // 14: vv.options.ge:extendee -> google.protobuf.FieldOptions
	3,  // 15: vv.options.max_cap:extendee -> google.protobuf.FieldOptions
	3,  // 16: vv.options.min_cap:extendee -> google.protobuf.FieldOptions
	3,  // 17: vv.options.cst_datetime:extendee -> google.protobuf.FieldOptions
	3,  // 18: vv.options.cst_minute:extendee -> google.protobuf.FieldOptions
	3,  // 19: vv.options.cn_mobile:extendee -> google.protobuf.FieldOptions
	3,  // 20: vv.options.cst_day:extendee -> google.protobuf.FieldOptions
	0,  // 21: vv.options.method_authorization:type_name -> vv.options.Handler
	0,  // 22: vv.options.method_proxy_authorization:type_name -> vv.options.Handler
	0,  // 23: vv.options.method_whitelisting:type_name -> vv.options.Handler
	0,  // 24: vv.options.authorization:type_name -> vv.options.Handler
	0,  // 25: vv.options.proxy_authorization:type_name -> vv.options.Handler
	0,  // 26: vv.options.whitelisting:type_name -> vv.options.Handler
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	21, // [21:27] is the sub-list for extension type_name
	0,  // [0:21] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_options_proto_init() }
func file_options_proto_init() {
	if File_options_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_options_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Handler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_options_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 21,
			NumServices:   0,
		},
		GoTypes:           file_options_proto_goTypes,
		DependencyIndexes: file_options_proto_depIdxs,
		MessageInfos:      file_options_proto_msgTypes,
		ExtensionInfos:    file_options_proto_extTypes,
	}.Build()
	File_options_proto = out.File
	file_options_proto_rawDesc = nil
	file_options_proto_goTypes = nil
	file_options_proto_depIdxs = nil
}
