// Code generated by protoc-gen-message-validator. DO NOT EDIT.

package dummy

import (
	errors "github.com/bluekaki/pkg/errors"
	strings "strings"
)

func (e *EchoReq) Validate() error {

	// Message  Kind:StringKind Cardinality:optional IsList:false IsMap:false IsPacked:false IsPlaceholder:false IsWeak:false IsExtension:false HasPresence:false
	e.Message = strings.TrimSpace(e.Message)

	if e.Message == "" {
		return errors.New("message required")
	}

	if !(len(e.Message) <= 30) {
		return errors.New("message illegal")
	}

	return nil
}

func (e *EchoResp) Validate() error {

	// Message  Kind:StringKind Cardinality:optional IsList:false IsMap:false IsPacked:false IsPlaceholder:false IsWeak:false IsExtension:false HasPresence:false
	e.Message = strings.TrimSpace(e.Message)

	// Ack  Kind:BoolKind Cardinality:optional IsList:false IsMap:false IsPacked:false IsPlaceholder:false IsWeak:false IsExtension:false HasPresence:false

	return nil
}

func (p *PostEchoReq) Validate() error {

	// Name  Kind:StringKind Cardinality:optional IsList:false IsMap:false IsPacked:false IsPlaceholder:false IsWeak:false IsExtension:false HasPresence:false
	p.Name = strings.TrimSpace(p.Name)

	if p.Name == "" {
		return errors.New("name required")
	}

	if !(len(p.Name) <= 30) {
		return errors.New("name illegal")
	}

	// Message  Kind:StringKind Cardinality:optional IsList:false IsMap:false IsPacked:false IsPlaceholder:false IsWeak:false IsExtension:false HasPresence:false
	p.Message = strings.TrimSpace(p.Message)

	if p.Message == "" {
		return errors.New("message required")
	}

	if !(len(p.Message) <= 30) {
		return errors.New("message illegal")
	}

	return nil
}

func (p *PostEchoResp) Validate() error {

	// Message  Kind:StringKind Cardinality:optional IsList:false IsMap:false IsPacked:false IsPlaceholder:false IsWeak:false IsExtension:false HasPresence:false
	p.Message = strings.TrimSpace(p.Message)

	// Ack  Kind:BoolKind Cardinality:optional IsList:false IsMap:false IsPacked:false IsPlaceholder:false IsWeak:false IsExtension:false HasPresence:false

	return nil
}

func (u *UploadReq) Validate() error {

	// FileName  Kind:StringKind Cardinality:optional IsList:false IsMap:false IsPacked:false IsPlaceholder:false IsWeak:false IsExtension:false HasPresence:false
	u.FileName = strings.TrimSpace(u.FileName)

	if u.FileName == "" {
		return errors.New("file_name required")
	}

	if !(len(u.FileName) <= 30) {
		return errors.New("file_name illegal")
	}

	// Raw  Kind:BytesKind Cardinality:optional IsList:false IsMap:false IsPacked:false IsPlaceholder:false IsWeak:false IsExtension:false HasPresence:false

	if len(u.Raw) == 0 {
		return errors.New("raw required")
	}

	return nil
}

func (u *UploadResp) Validate() error {

	// Digest  Kind:StringKind Cardinality:optional IsList:false IsMap:false IsPacked:false IsPlaceholder:false IsWeak:false IsExtension:false HasPresence:false
	u.Digest = strings.TrimSpace(u.Digest)

	return nil
}

func (p *PictureReq) Validate() error {

	// FileName  Kind:StringKind Cardinality:optional IsList:false IsMap:false IsPacked:false IsPlaceholder:false IsWeak:false IsExtension:false HasPresence:false
	p.FileName = strings.TrimSpace(p.FileName)

	if p.FileName == "" {
		return errors.New("file_name required")
	}

	if !(len(p.FileName) <= 30) {
		return errors.New("file_name illegal")
	}

	return nil
}

func (p *PictureResp) ContentType() string {
	return "image/png"
}
func (p *PictureResp) Payload() []byte {
	return p.Raw
}
func (p *PictureResp) Validate() error {

	// Raw  Kind:BytesKind Cardinality:optional IsList:false IsMap:false IsPacked:false IsPlaceholder:false IsWeak:false IsExtension:false HasPresence:false

	return nil
}

func (e *ExcelResp) ContentType() string {
	return "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
}
func (e *ExcelResp) Payload() []byte {
	return e.Raw
}
func (e *ExcelResp) Validate() error {

	// Raw  Kind:BytesKind Cardinality:optional IsList:false IsMap:false IsPacked:false IsPlaceholder:false IsWeak:false IsExtension:false HasPresence:false

	return nil
}
